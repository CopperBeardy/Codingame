using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;

/**
 * Grab the pellets as fast as you can!
 **/
class Player
{
    static void Main(string[] args)
    {
        string[] inputs;
        inputs = Console.ReadLine().Split(' ');
        int width = int.Parse(inputs[0]); // size of the grid
        int height = int.Parse(inputs[1]); // top left corner is (x=0, y=0)
        string[] Grid = new string[height];
        List<Pellet> pellets;
        List<Pac> Pacs;
        for (int i = 0; i < height; i++)
        {
            string row = Console.ReadLine(); // one line of the grid: space " " is floor, pound "#" is wall
            Grid[i] = row;
        }

        // game loop
        while (true)
        {
            Pacs = new List<Pac>();
            inputs = Console.ReadLine().Split(' ');
            int myScore = int.Parse(inputs[0]);
            int opponentScore = int.Parse(inputs[1]);
            int visiblePacCount = int.Parse(Console.ReadLine()); // all your pacs and enemy pacs in sight
            for (int i = 0; i < visiblePacCount; i++)
            {
                inputs = Console.ReadLine().Split(' ');

                bool mine = inputs[1] != "0"; // true if this pac is yours
                if (mine)
                {
                    Pac pac = new Pac()
                    {
                        Id = int.Parse(inputs[0]),
                        X = int.Parse(inputs[2]),
                        Y = int.Parse(inputs[3]),
                    };
                }
                string typeId = inputs[4]; // unused in wood leagues
                int speedTurnsLeft = int.Parse(inputs[5]); // unused in wood leagues
                int abilityCooldown = int.Parse(inputs[6]); // unused in wood leagues
            }
            int visiblePelletCount = int.Parse(Console.ReadLine()); // all pellets in sight

            pellets = new List<Pellet>();
            for (int i = 0; i < visiblePelletCount; i++)
            {
                inputs = Console.ReadLine().Split(' ');
                Pellet pellet = new Pellet();
                pellet.X = int.Parse(inputs[0]);
                pellet.Y = int.Parse(inputs[1]);
                pellet.PointValue = int.Parse(inputs[2]); // amount of points this pellet is worth
                pellets.Add(pellet);
            }

            List<MoveTO> moves = new List<MoveTO>();

            foreach (Pac pac in Pacs)
            {
                Pellet tenPointPelt = pellets.Where(p => p.PointValue == 10).FirstOrDefault();

                MoveTO moveTo = new MoveTO();
                moveTo.PacId = pac.Id;
                if (tenPointPelt != null)
                {
                    moveTo.X = tenPointPelt.X;
                    moveTo.Y = tenPointPelt.Y;
                    pellets.RemoveAt(pellets.IndexOf(tenPointPelt));
                }
                else
                {
                    moveTo.X = pellets[0].X;
                    moveTo.Y = pellets[0].Y;
                    pellets.RemoveAt(0);
                }
                moves.Add(moveTo);
            }

            string output = "";

            for (int i = 0; i < moves.Count - 1; i++)
            {
                output += $"MOVE {moves[i].PacId} {moves[i].X} {moves[i].Y}|";
            }

            Console.WriteLine(output);

        }
    }

    public class Pellet
    {
        public int X { get; set; }
        public int Y { get; set; }
        public int PointValue { get; set; }
    }

    public class Pac
    {
        public int Id { get; set; }
        public int X { get; set; }
        public int Y { get; set; }
    }

    public class MoveTO
    {
        public int PacId { get; set; }
        public int X { get; set; }
        public int Y { get; set; }
    }
}